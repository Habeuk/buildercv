<?php
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;

/**
 * Update value max_length from 50 to 250.
 *
 * implement hook_update_8001
 *
 * @see https://www.drupal.org/node/2554097
 */
function __buildercv_update_name_max_length($entity_type_id) {
  // Retrieve existing field data.
  $database = \Drupal::database();
  $names = $database->select($entity_type_id . '_field_data', 'et')->fields('et', [
    'id',
    'langcode',
    'name'
  ])->execute()->fetchAll(\PDO::FETCH_ASSOC);
  // Remove data from the column.
  $database->update('site_type_datas_field_data')->fields([
    'name' => NULL
  ])->execute();
  // Remove old definition field.
  $updateManager = \Drupal::entityDefinitionUpdateManager();
  $storagedef = $updateManager->getFieldStorageDefinition('name', $entity_type_id);
  $updateManager->uninstallFieldStorageDefinition($storagedef);
  // Load new definition field in code.
  /**
   *
   * @var \Drupal\Core\Entity\EntityFieldManager $fieldManager
   */
  $fieldManager = \Drupal::service('entity_field.manager');
  $fields = $fieldManager->getFieldStorageDefinitions($entity_type_id);
  $updateManager->installFieldStorageDefinition('name', $entity_type_id, "buildercv", $fields['name']);
  // Restore entity data in the new schema.
  foreach ($names as $name) {
    $database->update($entity_type_id . '_field_data')->fields([
      'name' => $name['name']
    ])->condition('id', $name['id'])->condition('langcode', $name['langcode'])->execute();
  }
}

/**
 * Update value max_length from 50 to 250.
 *
 * implement hook_update_8001
 *
 * @see https://www.drupal.org/node/2554097
 */
function buildercv_update_8001() {
  __buildercv_update_name_max_length('model_cv');
  __buildercv_update_name_max_length('cv_entity');
}

/**
 * implement hook_entity_base_field_info
 *
 * @param EntityTypeInterface $entity_type
 */
function buildercv_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() == 'model_cv' || $entity_type->id() == 'cv_entity') {
    if (\Drupal::moduleHandler()->moduleExists('domain')) {
      __buildercv_fields_domain($fields);
    }
  }
  return $fields;
}

/**
 *
 * @param array $fields
 */
function __buildercv_fields_domain(array &$fields) {
  $field_access = \Drupal\domain_access\DomainAccessManagerInterface::DOMAIN_ACCESS_FIELD;
  $field_source = \Drupal\domain_source\DomainSourceElementManagerInterface::DOMAIN_SOURCE_FIELD;
  //
  $fields[$field_access] = BaseFieldDefinition::create('entity_reference')->setLabel(t(" Domain access "))->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)->setTranslatable(false)->setDisplayOptions('form', [
    'type' => 'select2_entity_reference',
    'weight' => 40,
    'settings' => [
      'autocomplete' => true
    ]
  ])->setSetting('handler', 'default')->setSetting('target_type', 'domain')->setDisplayConfigurable('form', TRUE)->setDisplayConfigurable('view', TRUE)->setDefaultValueCallback('\Drupal\buildercv\Buildercv::getActiveDomain');
  //
  $fields[$field_source] = BaseFieldDefinition::create('entity_reference')->setLabel(t(" Domain source "))->setDisplayOptions('form', [
    'type' => 'options_select',
    'weight' => 40
  ])->setSetting('handler', 'default')->setSetting('target_type', 'domain')->setDisplayConfigurable('form', TRUE)->setDisplayConfigurable('view', TRUE)->setTranslatable(false);
}

/**
 * Implements hook_theme().
 */
function buildercv_theme() {
  $hooks = [];
  $hooks['buildercv_experience_formatter'] = [
    'preprocess functions' => [
      'template_preprocess_buildercv_experience_formatter'
    ],
    'render element' => 'element',
    'file' => 'buildercv.theme.inc'
  ];
  $hooks['buildercv_value_niveau_formatter'] = [
    'preprocess functions' => [
      'template_preprocess_buildercv_value_niveau_formatter'
    ],
    'render element' => 'element',
    'file' => 'buildercv.theme.inc'
  ];
  $hooks['buildercv_value_niveau_formatter2'] = $hooks['buildercv_value_niveau_formatter'];
  $hooks['buildercv_experience_formatter2'] = $hooks['buildercv_experience_formatter'];
  $hooks['buildercv_experience_formatter3'] = [
    'preprocess functions' => [
      'template_preprocess_buildercv_experience_formatter3'
    ],
    'render element' => 'element',
    'file' => 'buildercv.theme.inc'
  ];
  $hooks['buildercv_experience_formatter4'] = $hooks['buildercv_experience_formatter3'];
  $hooks['buildercv_icon_text'] = [
    'preprocess functions' => [
      'template_preprocess_buildercv_icon_text'
    ],
    'render element' => 'element',
    'file' => 'buildercv.theme.inc'
  ];
  $hooks['buildercv_icon_text_svg'] = $hooks["buildercv_icon_text"];
  $hooks['buildercv_field_chart'] = [
    'preprocess functions' => [
      'template_preprocess_buildercv_field_chart'
    ],
    'render element' => 'element',
    'file' => 'buildercv.theme.inc'
  ];
  $hooks['buildercv_text_bg'] = [
    'preprocess functions' => [
      'template_preprocess_buildercv_text_bg'
    ],
    'render element' => 'element',
    'file' => 'buildercv.theme.inc'
  ];
  return $hooks;
}
