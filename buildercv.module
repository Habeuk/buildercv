<?php
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;

/**
 * implement hook_entity_base_field_info
 *
 * @param EntityTypeInterface $entity_type
 */
function buildercv_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() == 'model_cv' || $entity_type->id() == 'cv_entity') {
    if (\Drupal::moduleHandler()->moduleExists('domain')) {
      __buildercv_fields_domain($fields);
    }
  }
  return $fields;
}

/**
 *
 * @param array $fields
 */
function __buildercv_fields_domain(array &$fields) {
  $field_access = \Drupal\domain_access\DomainAccessManagerInterface::DOMAIN_ACCESS_FIELD;
  $field_source = \Drupal\domain_source\DomainSourceElementManagerInterface::DOMAIN_SOURCE_FIELD;
  //
  $fields[$field_access] = BaseFieldDefinition::create('entity_reference')->setLabel(t(" Domain access "))->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)->setTranslatable(false)->setDisplayOptions('form', [
    'type' => 'select2_entity_reference',
    'weight' => 40,
    'settings' => [
      'autocomplete' => true
    ]
  ])->setSetting('handler', 'default')->setSetting('target_type', 'domain')->setDisplayConfigurable('form', TRUE)->setDisplayConfigurable('view', TRUE)->setDefaultValueCallback('\Drupal\buildercv\Buildercv::getActiveDomain');
  //
  $fields[$field_source] = BaseFieldDefinition::create('entity_reference')->setLabel(t(" Domain source "))->setDisplayOptions('form', [
    'type' => 'options_select',
    'weight' => 40
  ])->setSetting('handler', 'default')->setSetting('target_type', 'domain')->setDisplayConfigurable('form', TRUE)->setDisplayConfigurable('view', TRUE)->setTranslatable(false);
}

/**
 * Implements hook_theme().
 */
function buildercv_theme() {
  $hooks = [];
  $hooks['buildercv_experience_formatter'] = [
    'preprocess functions' => [
      'template_preprocess_buildercv_experience_formatter'
    ],
    'render element' => 'element',
    'file' => 'buildercv.theme.inc'
  ];
  $hooks['buildercv_value_niveau_formatter'] = [
    'preprocess functions' => [
      'template_preprocess_buildercv_value_niveau_formatter'
    ],
    'render element' => 'element',
    'file' => 'buildercv.theme.inc'
  ];
  return $hooks;
}
